//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A base / value business entity used to represent money */
public class Money: APIModel {

    /** Currency (ISO4217 norm uses 3 letters to define the currency) */
    public var unit: String?

    /** A positive floating point number */
    public var value: Float?

    public init(unit: String? = nil, value: Float? = nil) {
        self.unit = unit
        self.value = value
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        unit = try container.decodeIfPresent("unit")
        value = try container.decodeIfPresent("value")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(unit, forKey: "unit")
        try container.encodeIfPresent(value, forKey: "value")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Money else { return false }
      guard self.unit == object.unit else { return false }
      guard self.value == object.value else { return false }
      return true
    }

    public static func == (lhs: Money, rhs: Money) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
