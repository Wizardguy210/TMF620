//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx) */
public class ErrorType: APIModel {

    /** Application relevant detail, defined in the API or a common list. */
    public var code: String

    /** Explanation of the reason for the error which can be shown to a client user. */
    public var reason: String

    /** When sub-classing, this defines the super-class. */
    public var alphabaseType: String?

    /** A URI to a JSON-Schema file that defines additional attributes and relationships */
    public var alphaschemaLocation: URL?

    /** When sub-classing, this defines the sub-class entity name. */
    public var alphatype: String?

    /** More details and corrective actions related to the error which can be shown to a client user. */
    public var message: String?

    /** URI of documentation describing the error. */
    public var referenceError: URL?

    /** HTTP Error code extension */
    public var status: String?

    public init(code: String, reason: String, alphabaseType: String? = nil, alphaschemaLocation: URL? = nil, alphatype: String? = nil, message: String? = nil, referenceError: URL? = nil, status: String? = nil) {
        self.code = code
        self.reason = reason
        self.alphabaseType = alphabaseType
        self.alphaschemaLocation = alphaschemaLocation
        self.alphatype = alphatype
        self.message = message
        self.referenceError = referenceError
        self.status = status
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        code = try container.decode("code")
        reason = try container.decode("reason")
        alphabaseType = try container.decodeIfPresent("@baseType")
        alphaschemaLocation = try container.decodeIfPresent("@schemaLocation")
        alphatype = try container.decodeIfPresent("@type")
        message = try container.decodeIfPresent("message")
        referenceError = try container.decodeIfPresent("referenceError")
        status = try container.decodeIfPresent("status")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(code, forKey: "code")
        try container.encode(reason, forKey: "reason")
        try container.encodeIfPresent(alphabaseType, forKey: "@baseType")
        try container.encodeIfPresent(alphaschemaLocation, forKey: "@schemaLocation")
        try container.encodeIfPresent(alphatype, forKey: "@type")
        try container.encodeIfPresent(message, forKey: "message")
        try container.encodeIfPresent(referenceError, forKey: "referenceError")
        try container.encodeIfPresent(status, forKey: "status")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ErrorType else { return false }
      guard self.code == object.code else { return false }
      guard self.reason == object.reason else { return false }
      guard self.alphabaseType == object.alphabaseType else { return false }
      guard self.alphaschemaLocation == object.alphaschemaLocation else { return false }
      guard self.alphatype == object.alphatype else { return false }
      guard self.message == object.message else { return false }
      guard self.referenceError == object.referenceError else { return false }
      guard self.status == object.status else { return false }
      return true
    }

    public static func == (lhs: ErrorType, rhs: ErrorType) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
