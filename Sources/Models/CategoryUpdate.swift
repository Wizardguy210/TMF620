//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other categories and/or product offerings, resource or service candidates.
Skipped properties: id,href,lastUpdate,@type,@baseType */
public class CategoryUpdate: APIModel {

    /** A URI to a JSON-Schema file that defines additional attributes and relationships */
    public var alphaschemaLocation: URL?

    /** Description of the category */
    public var description: String?

    /** If true, this Boolean indicates that the category is a root of categories */
    public var isRoot: Bool?

    /** Used to indicate the current lifecycle status */
    public var lifecycleStatus: String?

    /** Name of the category */
    public var name: String?

    /** Unique identifier of the parent category */
    public var parentId: String?

    /** A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information. */
    public var productOffering: [ProductOfferingRef]?

    /** The category resource is used to group product offerings, service and resource candidates in logical containers. Categories can contain other (sub-)categories and/or product offerings. */
    public var subCategory: [CategoryRef]?

    public var validFor: TimePeriod?

    /** Category version */
    public var version: String?

    public init(alphaschemaLocation: URL? = nil, description: String? = nil, isRoot: Bool? = nil, lifecycleStatus: String? = nil, name: String? = nil, parentId: String? = nil, productOffering: [ProductOfferingRef]? = nil, subCategory: [CategoryRef]? = nil, validFor: TimePeriod? = nil, version: String? = nil) {
        self.alphaschemaLocation = alphaschemaLocation
        self.description = description
        self.isRoot = isRoot
        self.lifecycleStatus = lifecycleStatus
        self.name = name
        self.parentId = parentId
        self.productOffering = productOffering
        self.subCategory = subCategory
        self.validFor = validFor
        self.version = version
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        alphaschemaLocation = try container.decodeIfPresent("@schemaLocation")
        description = try container.decodeIfPresent("description")
        isRoot = try container.decodeIfPresent("isRoot")
        lifecycleStatus = try container.decodeIfPresent("lifecycleStatus")
        name = try container.decodeIfPresent("name")
        parentId = try container.decodeIfPresent("parentId")
        productOffering = try container.decodeArrayIfPresent("productOffering")
        subCategory = try container.decodeArrayIfPresent("subCategory")
        validFor = try container.decodeIfPresent("validFor")
        version = try container.decodeIfPresent("version")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(alphaschemaLocation, forKey: "@schemaLocation")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(isRoot, forKey: "isRoot")
        try container.encodeIfPresent(lifecycleStatus, forKey: "lifecycleStatus")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(parentId, forKey: "parentId")
        try container.encodeIfPresent(productOffering, forKey: "productOffering")
        try container.encodeIfPresent(subCategory, forKey: "subCategory")
        try container.encodeIfPresent(validFor, forKey: "validFor")
        try container.encodeIfPresent(version, forKey: "version")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CategoryUpdate else { return false }
      guard self.alphaschemaLocation == object.alphaschemaLocation else { return false }
      guard self.description == object.description else { return false }
      guard self.isRoot == object.isRoot else { return false }
      guard self.lifecycleStatus == object.lifecycleStatus else { return false }
      guard self.name == object.name else { return false }
      guard self.parentId == object.parentId else { return false }
      guard self.productOffering == object.productOffering else { return false }
      guard self.subCategory == object.subCategory else { return false }
      guard self.validFor == object.validFor else { return false }
      guard self.version == object.version else { return false }
      return true
    }

    public static func == (lhs: CategoryUpdate, rhs: CategoryUpdate) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
