//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Represents a task used to import resources from a file
Skipped properties: id,href */
public class ImportJobCreate: APIModel {

    /** URL of the file containing the data to be imported */
    public var url: URL

    /** When sub-classing, this defines the super-class */
    public var alphabaseType: String?

    /** A URI to a JSON-Schema file that defines additional attributes and relationships */
    public var alphaschemaLocation: URL?

    /** When sub-classing, this defines the sub-class Extensible name */
    public var alphatype: String?

    /** Date at which the job was completed */
    public var completionDate: DateTime?

    /** Indicates the format of the imported data */
    public var contentType: String?

    /** Date at which the job was created */
    public var creationDate: DateTime?

    /** Reason for failure if status is failed */
    public var errorLog: String?

    /** URL of the root resource where the content of the file specified by the import job must be applied */
    public var path: String?

    public var status: JobStateType?

    public init(url: URL, alphabaseType: String? = nil, alphaschemaLocation: URL? = nil, alphatype: String? = nil, completionDate: DateTime? = nil, contentType: String? = nil, creationDate: DateTime? = nil, errorLog: String? = nil, path: String? = nil, status: JobStateType? = nil) {
        self.url = url
        self.alphabaseType = alphabaseType
        self.alphaschemaLocation = alphaschemaLocation
        self.alphatype = alphatype
        self.completionDate = completionDate
        self.contentType = contentType
        self.creationDate = creationDate
        self.errorLog = errorLog
        self.path = path
        self.status = status
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        url = try container.decode("url")
        alphabaseType = try container.decodeIfPresent("@baseType")
        alphaschemaLocation = try container.decodeIfPresent("@schemaLocation")
        alphatype = try container.decodeIfPresent("@type")
        completionDate = try container.decodeIfPresent("completionDate")
        contentType = try container.decodeIfPresent("contentType")
        creationDate = try container.decodeIfPresent("creationDate")
        errorLog = try container.decodeIfPresent("errorLog")
        path = try container.decodeIfPresent("path")
        status = try container.decodeIfPresent("status")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(url, forKey: "url")
        try container.encodeIfPresent(alphabaseType, forKey: "@baseType")
        try container.encodeIfPresent(alphaschemaLocation, forKey: "@schemaLocation")
        try container.encodeIfPresent(alphatype, forKey: "@type")
        try container.encodeIfPresent(completionDate, forKey: "completionDate")
        try container.encodeIfPresent(contentType, forKey: "contentType")
        try container.encodeIfPresent(creationDate, forKey: "creationDate")
        try container.encodeIfPresent(errorLog, forKey: "errorLog")
        try container.encodeIfPresent(path, forKey: "path")
        try container.encodeIfPresent(status, forKey: "status")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ImportJobCreate else { return false }
      guard self.url == object.url else { return false }
      guard self.alphabaseType == object.alphabaseType else { return false }
      guard self.alphaschemaLocation == object.alphaschemaLocation else { return false }
      guard self.alphatype == object.alphatype else { return false }
      guard self.completionDate == object.completionDate else { return false }
      guard self.contentType == object.contentType else { return false }
      guard self.creationDate == object.creationDate else { return false }
      guard self.errorLog == object.errorLog else { return false }
      guard self.path == object.path else { return false }
      guard self.status == object.status else { return false }
      return true
    }

    public static func == (lhs: ImportJobCreate, rhs: ImportJobCreate) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
