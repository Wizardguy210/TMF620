//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** An attachment by value or by reference. An attachment complements the description of an element, for example through a document, a video, a picture. */
public class AttachmentRefOrValue: APIModel {

    /** When sub-classing, this defines the super-class */
    public var alphabaseType: String?

    /** The actual type of the target instance when needed for disambiguation. */
    public var alphareferredType: String?

    /** A URI to a JSON-Schema file that defines additional attributes and relationships */
    public var alphaschemaLocation: URL?

    /** When sub-classing, this defines the sub-class Extensible name */
    public var alphatype: String?

    /** Attachment type such as video, picture */
    public var attachmentType: String?

    /** The actual contents of the attachment object, if embedded, encoded as base64 */
    public var content: String?

    /** A narrative text describing the content of the attachment */
    public var description: String?

    /** URI for this Attachment */
    public var href: URL?

    /** Unique identifier for this particular attachment */
    public var id: String?

    /** Attachment mime type such as extension file for video, picture and document */
    public var mimeType: String?

    /** The name of the attachment */
    public var name: String?

    public var size: Quantity?

    /** Uniform Resource Locator, is a web page address (a subset of URI) */
    public var url: URL?

    public var validFor: TimePeriod?

    public init(alphabaseType: String? = nil, alphareferredType: String? = nil, alphaschemaLocation: URL? = nil, alphatype: String? = nil, attachmentType: String? = nil, content: String? = nil, description: String? = nil, href: URL? = nil, id: String? = nil, mimeType: String? = nil, name: String? = nil, size: Quantity? = nil, url: URL? = nil, validFor: TimePeriod? = nil) {
        self.alphabaseType = alphabaseType
        self.alphareferredType = alphareferredType
        self.alphaschemaLocation = alphaschemaLocation
        self.alphatype = alphatype
        self.attachmentType = attachmentType
        self.content = content
        self.description = description
        self.href = href
        self.id = id
        self.mimeType = mimeType
        self.name = name
        self.size = size
        self.url = url
        self.validFor = validFor
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        alphabaseType = try container.decodeIfPresent("@baseType")
        alphareferredType = try container.decodeIfPresent("@referredType")
        alphaschemaLocation = try container.decodeIfPresent("@schemaLocation")
        alphatype = try container.decodeIfPresent("@type")
        attachmentType = try container.decodeIfPresent("attachmentType")
        content = try container.decodeIfPresent("content")
        description = try container.decodeIfPresent("description")
        href = try container.decodeIfPresent("href")
        id = try container.decodeIfPresent("id")
        mimeType = try container.decodeIfPresent("mimeType")
        name = try container.decodeIfPresent("name")
        size = try container.decodeIfPresent("size")
        url = try container.decodeIfPresent("url")
        validFor = try container.decodeIfPresent("validFor")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(alphabaseType, forKey: "@baseType")
        try container.encodeIfPresent(alphareferredType, forKey: "@referredType")
        try container.encodeIfPresent(alphaschemaLocation, forKey: "@schemaLocation")
        try container.encodeIfPresent(alphatype, forKey: "@type")
        try container.encodeIfPresent(attachmentType, forKey: "attachmentType")
        try container.encodeIfPresent(content, forKey: "content")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(href, forKey: "href")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(mimeType, forKey: "mimeType")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(size, forKey: "size")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(validFor, forKey: "validFor")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AttachmentRefOrValue else { return false }
      guard self.alphabaseType == object.alphabaseType else { return false }
      guard self.alphareferredType == object.alphareferredType else { return false }
      guard self.alphaschemaLocation == object.alphaschemaLocation else { return false }
      guard self.alphatype == object.alphatype else { return false }
      guard self.attachmentType == object.attachmentType else { return false }
      guard self.content == object.content else { return false }
      guard self.description == object.description else { return false }
      guard self.href == object.href else { return false }
      guard self.id == object.id else { return false }
      guard self.mimeType == object.mimeType else { return false }
      guard self.name == object.name else { return false }
      guard self.size == object.size else { return false }
      guard self.url == object.url else { return false }
      guard self.validFor == object.validFor else { return false }
      return true
    }

    public static func == (lhs: AttachmentRefOrValue, rhs: AttachmentRefOrValue) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
