//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A set of numbers that specifies the lower and upper limits for a ProductOffering that can be procured as part of the related BundledProductOffering. Values can range from 0 to unbounded */
public class BundledProductOfferingOption: APIModel {

    /** When sub-classing, this defines the super-class */
    public var alphabaseType: String?

    /** A URI to a JSON-Schema file that defines additional attributes and relationships */
    public var alphaschemaLocation: URL?

    /** When sub-classing, this defines the sub-class Extensible name */
    public var alphatype: String?

    /** Default number of produc offereings that should be procured as part of the related BundledProductOffering */
    public var numberRelOfferDefault: Int?

    /** lower limit for a product offering that can be procured as part of the related BundledProductOffering */
    public var numberRelOfferLowerLimit: Int?

    /** upper limit for a product offering that can be procured as part of the related BundledProductOffering */
    public var numberRelOfferUpperLimit: Int?

    public init(alphabaseType: String? = nil, alphaschemaLocation: URL? = nil, alphatype: String? = nil, numberRelOfferDefault: Int? = nil, numberRelOfferLowerLimit: Int? = nil, numberRelOfferUpperLimit: Int? = nil) {
        self.alphabaseType = alphabaseType
        self.alphaschemaLocation = alphaschemaLocation
        self.alphatype = alphatype
        self.numberRelOfferDefault = numberRelOfferDefault
        self.numberRelOfferLowerLimit = numberRelOfferLowerLimit
        self.numberRelOfferUpperLimit = numberRelOfferUpperLimit
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        alphabaseType = try container.decodeIfPresent("@baseType")
        alphaschemaLocation = try container.decodeIfPresent("@schemaLocation")
        alphatype = try container.decodeIfPresent("@type")
        numberRelOfferDefault = try container.decodeIfPresent("numberRelOfferDefault")
        numberRelOfferLowerLimit = try container.decodeIfPresent("numberRelOfferLowerLimit")
        numberRelOfferUpperLimit = try container.decodeIfPresent("numberRelOfferUpperLimit")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(alphabaseType, forKey: "@baseType")
        try container.encodeIfPresent(alphaschemaLocation, forKey: "@schemaLocation")
        try container.encodeIfPresent(alphatype, forKey: "@type")
        try container.encodeIfPresent(numberRelOfferDefault, forKey: "numberRelOfferDefault")
        try container.encodeIfPresent(numberRelOfferLowerLimit, forKey: "numberRelOfferLowerLimit")
        try container.encodeIfPresent(numberRelOfferUpperLimit, forKey: "numberRelOfferUpperLimit")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? BundledProductOfferingOption else { return false }
      guard self.alphabaseType == object.alphabaseType else { return false }
      guard self.alphaschemaLocation == object.alphaschemaLocation else { return false }
      guard self.alphatype == object.alphatype else { return false }
      guard self.numberRelOfferDefault == object.numberRelOfferDefault else { return false }
      guard self.numberRelOfferLowerLimit == object.numberRelOfferLowerLimit else { return false }
      guard self.numberRelOfferUpperLimit == object.numberRelOfferUpperLimit else { return false }
      return true
    }

    public static func == (lhs: BundledProductOfferingOption, rhs: BundledProductOfferingOption) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
