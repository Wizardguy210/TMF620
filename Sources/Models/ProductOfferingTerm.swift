//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** A condition under which a ProductOffering is made available to Customers. For instance, a productOffering can be offered with multiple commitment periods. */
public class ProductOfferingTerm: APIModel {

    /** When sub-classing, this defines the super-class */
    public var alphabaseType: String?

    /** A URI to a JSON-Schema file that defines additional attributes and relationships */
    public var alphaschemaLocation: URL?

    /** When sub-classing, this defines the sub-class Extensible name */
    public var alphatype: String?

    /** Description of the productOfferingTerm */
    public var description: String?

    public var duration: Duration?

    /** Name of the productOfferingTerm */
    public var name: String?

    public var validFor: TimePeriod?

    public init(alphabaseType: String? = nil, alphaschemaLocation: URL? = nil, alphatype: String? = nil, description: String? = nil, duration: Duration? = nil, name: String? = nil, validFor: TimePeriod? = nil) {
        self.alphabaseType = alphabaseType
        self.alphaschemaLocation = alphaschemaLocation
        self.alphatype = alphatype
        self.description = description
        self.duration = duration
        self.name = name
        self.validFor = validFor
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        alphabaseType = try container.decodeIfPresent("@baseType")
        alphaschemaLocation = try container.decodeIfPresent("@schemaLocation")
        alphatype = try container.decodeIfPresent("@type")
        description = try container.decodeIfPresent("description")
        duration = try container.decodeIfPresent("duration")
        name = try container.decodeIfPresent("name")
        validFor = try container.decodeIfPresent("validFor")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(alphabaseType, forKey: "@baseType")
        try container.encodeIfPresent(alphaschemaLocation, forKey: "@schemaLocation")
        try container.encodeIfPresent(alphatype, forKey: "@type")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(duration, forKey: "duration")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(validFor, forKey: "validFor")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ProductOfferingTerm else { return false }
      guard self.alphabaseType == object.alphabaseType else { return false }
      guard self.alphaschemaLocation == object.alphaschemaLocation else { return false }
      guard self.alphatype == object.alphatype else { return false }
      guard self.description == object.description else { return false }
      guard self.duration == object.duration else { return false }
      guard self.name == object.name else { return false }
      guard self.validFor == object.validFor else { return false }
      return true
    }

    public static func == (lhs: ProductOfferingTerm, rhs: ProductOfferingTerm) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
