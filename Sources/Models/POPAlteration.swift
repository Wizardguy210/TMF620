//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Is an amount, usually of money, that modifies the price charged for an order item. */
public class POPAlteration: APIModel {

    public var price: ProductPriceValue

    /** A category that describes the price such as recurring, one time and usage. */
    public var priceType: String

    /** When sub-classing, this defines the super-class */
    public var alphabaseType: String?

    /** A URI to a JSON-Schema file that defines additional attributes and relationships */
    public var alphaschemaLocation: URL?

    /** When sub-classing, this defines the sub-class Extensible name */
    public var alphatype: String?

    public var applicationDuration: Duration?

    /** A narrative that explains in detail the semantics of this order item price alteration */
    public var description: String?

    /** Hyperlink reference */
    public var href: URL?

    /** unique identifier */
    public var id: String?

    /** Name given to this price alteration */
    public var name: String?

    /** Priority level for applying this alteration among all the defined alterations on the order item price */
    public var priority: Int?

    /** Could be month, week... */
    public var recurringChargePeriod: String?

    public var unitOfMeasure: Quantity?

    public var validFor: TimePeriod?

    public init(price: ProductPriceValue, priceType: String, alphabaseType: String? = nil, alphaschemaLocation: URL? = nil, alphatype: String? = nil, applicationDuration: Duration? = nil, description: String? = nil, href: URL? = nil, id: String? = nil, name: String? = nil, priority: Int? = nil, recurringChargePeriod: String? = nil, unitOfMeasure: Quantity? = nil, validFor: TimePeriod? = nil) {
        self.price = price
        self.priceType = priceType
        self.alphabaseType = alphabaseType
        self.alphaschemaLocation = alphaschemaLocation
        self.alphatype = alphatype
        self.applicationDuration = applicationDuration
        self.description = description
        self.href = href
        self.id = id
        self.name = name
        self.priority = priority
        self.recurringChargePeriod = recurringChargePeriod
        self.unitOfMeasure = unitOfMeasure
        self.validFor = validFor
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        price = try container.decode("price")
        priceType = try container.decode("priceType")
        alphabaseType = try container.decodeIfPresent("@baseType")
        alphaschemaLocation = try container.decodeIfPresent("@schemaLocation")
        alphatype = try container.decodeIfPresent("@type")
        applicationDuration = try container.decodeIfPresent("applicationDuration")
        description = try container.decodeIfPresent("description")
        href = try container.decodeIfPresent("href")
        id = try container.decodeIfPresent("id")
        name = try container.decodeIfPresent("name")
        priority = try container.decodeIfPresent("priority")
        recurringChargePeriod = try container.decodeIfPresent("recurringChargePeriod")
        unitOfMeasure = try container.decodeIfPresent("unitOfMeasure")
        validFor = try container.decodeIfPresent("validFor")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(price, forKey: "price")
        try container.encode(priceType, forKey: "priceType")
        try container.encodeIfPresent(alphabaseType, forKey: "@baseType")
        try container.encodeIfPresent(alphaschemaLocation, forKey: "@schemaLocation")
        try container.encodeIfPresent(alphatype, forKey: "@type")
        try container.encodeIfPresent(applicationDuration, forKey: "applicationDuration")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(href, forKey: "href")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(priority, forKey: "priority")
        try container.encodeIfPresent(recurringChargePeriod, forKey: "recurringChargePeriod")
        try container.encodeIfPresent(unitOfMeasure, forKey: "unitOfMeasure")
        try container.encodeIfPresent(validFor, forKey: "validFor")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? POPAlteration else { return false }
      guard self.price == object.price else { return false }
      guard self.priceType == object.priceType else { return false }
      guard self.alphabaseType == object.alphabaseType else { return false }
      guard self.alphaschemaLocation == object.alphaschemaLocation else { return false }
      guard self.alphatype == object.alphatype else { return false }
      guard self.applicationDuration == object.applicationDuration else { return false }
      guard self.description == object.description else { return false }
      guard self.href == object.href else { return false }
      guard self.id == object.id else { return false }
      guard self.name == object.name else { return false }
      guard self.priority == object.priority else { return false }
      guard self.recurringChargePeriod == object.recurringChargePeriod else { return false }
      guard self.unitOfMeasure == object.unitOfMeasure else { return false }
      guard self.validFor == object.validFor else { return false }
      return true
    }

    public static func == (lhs: POPAlteration, rhs: POPAlteration) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
