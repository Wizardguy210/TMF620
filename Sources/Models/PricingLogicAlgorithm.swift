//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** The PricingLogicAlgorithm entity represents an instantiation of an interface specification to external rating function (without a modeled bahavior in SID). Some of the parameters of the interface definiition may be already set (such as price per unit) and some may be gathered during the rating process from the event (such as call duration) or from ProductCharacteristicValues (such as assigned bandwidth) */
public class PricingLogicAlgorithm: APIModel {

    /** When sub-classing, this defines the super-class */
    public var alphabaseType: String?

    /** A URI to a JSON-Schema file that defines additional attributes and relationships */
    public var alphaschemaLocation: URL?

    /** When sub-classing, this defines the sub-class Extensible name */
    public var alphatype: String?

    /** Description of the PricingLogicAlgorithm */
    public var description: String?

    /** Hyperlink reference */
    public var href: URL?

    /** unique identifier */
    public var id: String?

    /** Name given to the PricingLogicAlgorithm */
    public var name: String?

    /** id of corresponding PricingLogicAlgorithm specification */
    public var plaSpecId: String?

    public var validFor: TimePeriod?

    public init(alphabaseType: String? = nil, alphaschemaLocation: URL? = nil, alphatype: String? = nil, description: String? = nil, href: URL? = nil, id: String? = nil, name: String? = nil, plaSpecId: String? = nil, validFor: TimePeriod? = nil) {
        self.alphabaseType = alphabaseType
        self.alphaschemaLocation = alphaschemaLocation
        self.alphatype = alphatype
        self.description = description
        self.href = href
        self.id = id
        self.name = name
        self.plaSpecId = plaSpecId
        self.validFor = validFor
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        alphabaseType = try container.decodeIfPresent("@baseType")
        alphaschemaLocation = try container.decodeIfPresent("@schemaLocation")
        alphatype = try container.decodeIfPresent("@type")
        description = try container.decodeIfPresent("description")
        href = try container.decodeIfPresent("href")
        id = try container.decodeIfPresent("id")
        name = try container.decodeIfPresent("name")
        plaSpecId = try container.decodeIfPresent("plaSpecId")
        validFor = try container.decodeIfPresent("validFor")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(alphabaseType, forKey: "@baseType")
        try container.encodeIfPresent(alphaschemaLocation, forKey: "@schemaLocation")
        try container.encodeIfPresent(alphatype, forKey: "@type")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(href, forKey: "href")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(plaSpecId, forKey: "plaSpecId")
        try container.encodeIfPresent(validFor, forKey: "validFor")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PricingLogicAlgorithm else { return false }
      guard self.alphabaseType == object.alphabaseType else { return false }
      guard self.alphaschemaLocation == object.alphaschemaLocation else { return false }
      guard self.alphatype == object.alphatype else { return false }
      guard self.description == object.description else { return false }
      guard self.href == object.href else { return false }
      guard self.id == object.id else { return false }
      guard self.name == object.name else { return false }
      guard self.plaSpecId == object.plaSpecId else { return false }
      guard self.validFor == object.validFor else { return false }
      return true
    }

    public static func == (lhs: PricingLogicAlgorithm, rhs: PricingLogicAlgorithm) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
