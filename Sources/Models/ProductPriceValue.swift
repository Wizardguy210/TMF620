//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration. */
public class ProductPriceValue: APIModel {

    /** When sub-classing, this defines the super-class */
    public var alphabaseType: String?

    /** A URI to a JSON-Schema file that defines additional attributes and relationships */
    public var alphaschemaLocation: URL?

    /** When sub-classing, this defines the sub-class Extensible name */
    public var alphatype: String?

    public var dutyFreeAmount: Money?

    /** Percentage to apply for ProdOfferPriceAlteration */
    public var percentage: Float?

    /** Tax category */
    public var taxCategory: String?

    public var taxIncludedAmount: Money?

    /** Tax rate */
    public var taxRate: Float?

    public init(alphabaseType: String? = nil, alphaschemaLocation: URL? = nil, alphatype: String? = nil, dutyFreeAmount: Money? = nil, percentage: Float? = nil, taxCategory: String? = nil, taxIncludedAmount: Money? = nil, taxRate: Float? = nil) {
        self.alphabaseType = alphabaseType
        self.alphaschemaLocation = alphaschemaLocation
        self.alphatype = alphatype
        self.dutyFreeAmount = dutyFreeAmount
        self.percentage = percentage
        self.taxCategory = taxCategory
        self.taxIncludedAmount = taxIncludedAmount
        self.taxRate = taxRate
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        alphabaseType = try container.decodeIfPresent("@baseType")
        alphaschemaLocation = try container.decodeIfPresent("@schemaLocation")
        alphatype = try container.decodeIfPresent("@type")
        dutyFreeAmount = try container.decodeIfPresent("dutyFreeAmount")
        percentage = try container.decodeIfPresent("percentage")
        taxCategory = try container.decodeIfPresent("taxCategory")
        taxIncludedAmount = try container.decodeIfPresent("taxIncludedAmount")
        taxRate = try container.decodeIfPresent("taxRate")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(alphabaseType, forKey: "@baseType")
        try container.encodeIfPresent(alphaschemaLocation, forKey: "@schemaLocation")
        try container.encodeIfPresent(alphatype, forKey: "@type")
        try container.encodeIfPresent(dutyFreeAmount, forKey: "dutyFreeAmount")
        try container.encodeIfPresent(percentage, forKey: "percentage")
        try container.encodeIfPresent(taxCategory, forKey: "taxCategory")
        try container.encodeIfPresent(taxIncludedAmount, forKey: "taxIncludedAmount")
        try container.encodeIfPresent(taxRate, forKey: "taxRate")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ProductPriceValue else { return false }
      guard self.alphabaseType == object.alphabaseType else { return false }
      guard self.alphaschemaLocation == object.alphaschemaLocation else { return false }
      guard self.alphatype == object.alphatype else { return false }
      guard self.dutyFreeAmount == object.dutyFreeAmount else { return false }
      guard self.percentage == object.percentage else { return false }
      guard self.taxCategory == object.taxCategory else { return false }
      guard self.taxIncludedAmount == object.taxIncludedAmount else { return false }
      guard self.taxRate == object.taxRate else { return false }
      return true
    }

    public static func == (lhs: ProductPriceValue, rhs: ProductPriceValue) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
