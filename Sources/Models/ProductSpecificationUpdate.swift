//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

/** Is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.
Skipped properties: id,href,lastUpdate,@type,@baseType */
public class ProductSpecificationUpdate: APIModel {

    /** A URI to a JSON-Schema file that defines additional attributes and relationships */
    public var alphaschemaLocation: URL?

    /** Complements the description of an element (for instance a product) through video, pictures... */
    public var attachment: [AttachmentRefOrValue]?

    /** The manufacturer or trademark of the specification */
    public var brand: String?

    /** A type of ProductSpecification that belongs to a grouping of ProductSpecifications made available to the market. It inherits of all attributes of ProductSpecification. */
    public var bundledProductSpecification: [BundledProductSpecification]?

    /** A narrative that explains in detail what the product specification is */
    public var description: String?

    /** isBundle determines whether a productSpecification represents a single productSpecification (false), or a bundle of productSpecification (true). */
    public var isBundle: Bool?

    /** Used to indicate the current lifecycle status */
    public var lifecycleStatus: String?

    /** Name of the product specification */
    public var name: String?

    /** An identification number assigned to uniquely identity the specification */
    public var productNumber: String?

    /** A characteristic quality or distinctive feature of a ProductSpecification.  The characteristic can be take on a discrete value, such as color, can take on a range of values, (for example, sensitivity of 100-240 mV), or can be derived from a formula (for example, usage time (hrs) = 30 - talk time *3). Certain characteristics, such as color, may be configured during the ordering or some other process. */
    public var productSpecCharacteristic: [ProductSpecificationCharacteristic]?

    /** A migration, substitution, dependency or exclusivity relationship between/among product specifications. */
    public var productSpecificationRelationship: [ProductSpecificationRelationship]?

    /** A related party defines party or party role linked to a specific entity. */
    public var relatedParty: [RelatedParty]?

    /** The ResourceSpecification is required to realize a ProductSpecification. */
    public var resourceSpecification: [ResourceSpecificationRef]?

    /** ServiceSpecification(s) required to realize a ProductSpecification. */
    public var serviceSpecification: [ServiceSpecificationRef]?

    public var targetProductSchema: TargetProductSchema?

    public var validFor: TimePeriod?

    /** Product specification version */
    public var version: String?

    public init(alphaschemaLocation: URL? = nil, attachment: [AttachmentRefOrValue]? = nil, brand: String? = nil, bundledProductSpecification: [BundledProductSpecification]? = nil, description: String? = nil, isBundle: Bool? = nil, lifecycleStatus: String? = nil, name: String? = nil, productNumber: String? = nil, productSpecCharacteristic: [ProductSpecificationCharacteristic]? = nil, productSpecificationRelationship: [ProductSpecificationRelationship]? = nil, relatedParty: [RelatedParty]? = nil, resourceSpecification: [ResourceSpecificationRef]? = nil, serviceSpecification: [ServiceSpecificationRef]? = nil, targetProductSchema: TargetProductSchema? = nil, validFor: TimePeriod? = nil, version: String? = nil) {
        self.alphaschemaLocation = alphaschemaLocation
        self.attachment = attachment
        self.brand = brand
        self.bundledProductSpecification = bundledProductSpecification
        self.description = description
        self.isBundle = isBundle
        self.lifecycleStatus = lifecycleStatus
        self.name = name
        self.productNumber = productNumber
        self.productSpecCharacteristic = productSpecCharacteristic
        self.productSpecificationRelationship = productSpecificationRelationship
        self.relatedParty = relatedParty
        self.resourceSpecification = resourceSpecification
        self.serviceSpecification = serviceSpecification
        self.targetProductSchema = targetProductSchema
        self.validFor = validFor
        self.version = version
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        alphaschemaLocation = try container.decodeIfPresent("@schemaLocation")
        attachment = try container.decodeArrayIfPresent("attachment")
        brand = try container.decodeIfPresent("brand")
        bundledProductSpecification = try container.decodeArrayIfPresent("bundledProductSpecification")
        description = try container.decodeIfPresent("description")
        isBundle = try container.decodeIfPresent("isBundle")
        lifecycleStatus = try container.decodeIfPresent("lifecycleStatus")
        name = try container.decodeIfPresent("name")
        productNumber = try container.decodeIfPresent("productNumber")
        productSpecCharacteristic = try container.decodeArrayIfPresent("productSpecCharacteristic")
        productSpecificationRelationship = try container.decodeArrayIfPresent("productSpecificationRelationship")
        relatedParty = try container.decodeArrayIfPresent("relatedParty")
        resourceSpecification = try container.decodeArrayIfPresent("resourceSpecification")
        serviceSpecification = try container.decodeArrayIfPresent("serviceSpecification")
        targetProductSchema = try container.decodeIfPresent("targetProductSchema")
        validFor = try container.decodeIfPresent("validFor")
        version = try container.decodeIfPresent("version")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(alphaschemaLocation, forKey: "@schemaLocation")
        try container.encodeIfPresent(attachment, forKey: "attachment")
        try container.encodeIfPresent(brand, forKey: "brand")
        try container.encodeIfPresent(bundledProductSpecification, forKey: "bundledProductSpecification")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(isBundle, forKey: "isBundle")
        try container.encodeIfPresent(lifecycleStatus, forKey: "lifecycleStatus")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(productNumber, forKey: "productNumber")
        try container.encodeIfPresent(productSpecCharacteristic, forKey: "productSpecCharacteristic")
        try container.encodeIfPresent(productSpecificationRelationship, forKey: "productSpecificationRelationship")
        try container.encodeIfPresent(relatedParty, forKey: "relatedParty")
        try container.encodeIfPresent(resourceSpecification, forKey: "resourceSpecification")
        try container.encodeIfPresent(serviceSpecification, forKey: "serviceSpecification")
        try container.encodeIfPresent(targetProductSchema, forKey: "targetProductSchema")
        try container.encodeIfPresent(validFor, forKey: "validFor")
        try container.encodeIfPresent(version, forKey: "version")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ProductSpecificationUpdate else { return false }
      guard self.alphaschemaLocation == object.alphaschemaLocation else { return false }
      guard self.attachment == object.attachment else { return false }
      guard self.brand == object.brand else { return false }
      guard self.bundledProductSpecification == object.bundledProductSpecification else { return false }
      guard self.description == object.description else { return false }
      guard self.isBundle == object.isBundle else { return false }
      guard self.lifecycleStatus == object.lifecycleStatus else { return false }
      guard self.name == object.name else { return false }
      guard self.productNumber == object.productNumber else { return false }
      guard self.productSpecCharacteristic == object.productSpecCharacteristic else { return false }
      guard self.productSpecificationRelationship == object.productSpecificationRelationship else { return false }
      guard self.relatedParty == object.relatedParty else { return false }
      guard self.resourceSpecification == object.resourceSpecification else { return false }
      guard self.serviceSpecification == object.serviceSpecification else { return false }
      guard self.targetProductSchema == object.targetProductSchema else { return false }
      guard self.validFor == object.validFor else { return false }
      guard self.version == object.version else { return false }
      return true
    }

    public static func == (lhs: ProductSpecificationUpdate, rhs: ProductSpecificationUpdate) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
