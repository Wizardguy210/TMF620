//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension TMF620.ProductOfferingPrice {

    /**
    Retrieves a ProductOfferingPrice by ID

    This operation retrieves a ProductOfferingPrice entity. Attribute selection is enabled for all first level attributes.
    */
    public enum RetrieveProductOfferingPrice {

        public static let service = APIService<Response>(id: "retrieveProductOfferingPrice", tag: "productOfferingPrice", method: "GET", path: "/productOfferingPrice/{id}", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Identifier of the ProductOfferingPrice */
                public var id: String

                /** Comma-separated properties to provide in response */
                public var fields: String?

                public init(id: String, fields: String? = nil) {
                    self.id = id
                    self.fields = fields
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: RetrieveProductOfferingPrice.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: String, fields: String? = nil) {
                let options = Options(id: id, fields: fields)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "id" + "}", with: "\(self.options.id)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let fields = options.fields {
                  params["fields"] = fields
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = ProductOfferingPrice

            /** Success */
            case status200(ProductOfferingPrice)

            /** Bad Request */
            case status400(ErrorType)

            /** Unauthorized */
            case status401(ErrorType)

            /** Forbidden */
            case status403(ErrorType)

            /** Not Found */
            case status404(ErrorType)

            /** Method Not allowed */
            case status405(ErrorType)

            /** Conflict */
            case status409(ErrorType)

            /** Internal Server Error */
            case status500(ErrorType)

            public var success: ProductOfferingPrice? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ErrorType? {
                switch self {
                case .status400(let response): return response
                case .status401(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                case .status405(let response): return response
                case .status409(let response): return response
                case .status500(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<ProductOfferingPrice, ErrorType> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status401(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                case .status405(let response): return response
                case .status409(let response): return response
                case .status500(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status401: return 401
                case .status403: return 403
                case .status404: return 404
                case .status405: return 405
                case .status409: return 409
                case .status500: return 500
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status401: return false
                case .status403: return false
                case .status404: return false
                case .status405: return false
                case .status409: return false
                case .status500: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(ProductOfferingPrice.self, from: data))
                case 400: self = try .status400(decoder.decode(ErrorType.self, from: data))
                case 401: self = try .status401(decoder.decode(ErrorType.self, from: data))
                case 403: self = try .status403(decoder.decode(ErrorType.self, from: data))
                case 404: self = try .status404(decoder.decode(ErrorType.self, from: data))
                case 405: self = try .status405(decoder.decode(ErrorType.self, from: data))
                case 409: self = try .status409(decoder.decode(ErrorType.self, from: data))
                case 500: self = try .status500(decoder.decode(ErrorType.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
